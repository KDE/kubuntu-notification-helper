#!/usr/bin/python3

# Process all pending crashes and mark them for whoopsie upload, but do not
# upload them to any other crash database. Wait until whoopsie is done
# uploading.
#
# Copyright (c) 2013 Canonical Ltd.
# Author: Martin Pitt <martin.pitt@ubuntu.com>
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.  See http://www.gnu.org/copyleft/gpl.html for
# the full text of the license.

import os
import sys
import time
import subprocess
import argparse
import dbus
import dbus.service

import apport.fileutils
import apport


def process_report(report):
    '''Collect information for a report and mark for whoopsie upload

    errors.ubuntu.com does not collect any hook data anyway, so we do not need
    to bother collecting it.

    Return path of upload stamp if report was successfully processed, or None
    otherwise.
    '''
    accept_stamp = '%s.drkonqi-accept' % report.rsplit('.', 1)[0]
    upload_stamp = '%s.upload' % report.rsplit('.', 1)[0]

    if not os.path.exists(accept_stamp):
        print('%s not marked for upload by drkonqi. Leaving it for apport.' % report)
        return None

    if os.path.exists(upload_stamp):
        print('%s already marked for upload, skipping' % report)
        return None

    r = apport.Report()
    try:
        with open(report, 'rb') as f:
            r.load(f, binary='compressed')
    except (PermissionError, Exception) as e:
        sys.stderr.write('ERROR: cannot load %s: %s\n' % (report, str(e)))
        return None
    if r.get('ProblemType', '') != 'Crash' or 'ExecutablePath' not in r:
        print('  skipping, not a crash')
        return None
    if 'Dependencies' in r:
        print('%s already has info collected' % report)
    else:
        print('Collecting info for %s...' % report)
        try:
            r.add_os_info()
            r.add_gdb_info()
            r.add_package_info()
        except (OSError, SystemError, ValueError) as e:
            sys.stderr.write('ERROR: cannot add apport info on %s: %s\n' %
                             (report, str(e)))
            return None

        # write updated report
        try:
            with open(report, 'ab') as f:
                os.chmod(report, 0)
                r.write(f, only_new=True)
                os.chmod(report, 0o640)
        except (PermissionError, Exception) as e:
            sys.stderr.write('ERROR: cannot update %s: %s\n' % (report, str(e)))
            return None

    # now tell whoopsie to upload the report
    print('Marking %s for whoopsie upload' % report)
    apport.fileutils.mark_report_upload(report)
    assert os.path.exists(upload_stamp)
    return upload_stamp


def collect_info():
    '''Collect information for all reports

    Return set of all generated upload stamps.
    '''
    if os.geteuid() != 0:
        sys.stderr.write('WARNING: Not running as root, cannot process reports'
                         ' which are not owned by uid %i\n' % os.getuid())

    stamps = set()
    reports = apport.fileutils.get_all_reports()
    for r in reports:
        res = process_report(r)
        if res:
            stamps.add(res)

    return stamps


def wait_uploaded(stamps, timeout):
    '''Wait until all reports were uploaded.

    Times out after a given number of seconds.

    Return True if all reports were uploaded, False if there are some missing.
    '''
    print('Waiting for whoopsie to upload reports (timeout: %i s)' % timeout)

    while timeout >= 0:
        # determine missing stamps
        missing = ''
        for stamp in stamps:
            uploaded = stamp + 'ed'
            if not os.path.exists(uploaded):
                missing += uploaded + ' '
        if not missing:
            return True

        print('  missing (remaining: %i s): %s' % (timeout, missing))
        time.sleep(10)
        timeout -= 10

    return False

session_bus = dbus.SessionBus()
try:
    session_bus.get_object("org.kubuntu.whoopsie_upload_all", "/UniqueApplication")
    print("INFO: whoopsie-upload-all already running")
    sys.exit(0)
except dbus.DBusException:
    # This will 'take' the DBUS name
    bus_name = dbus.service.BusName("org.kubuntu.whoopsie_upload_all", bus=session_bus)

#
# main
#
parser = argparse.ArgumentParser(description='Noninteractively upload all '
                                 'Apport crash reports to errors.ubuntu.com')
parser.add_argument('-t', '--timeout', default=900, type=int,
                    help='seconds to wait for whoopsie to upload the reports (default: 900s)')
opts = parser.parse_args()

# parse args


# verify that whoopsie is running
if subprocess.call(['pidof', 'whoopsie'], stdout=subprocess.PIPE) != 0:
    sys.stderr.write('ERROR: whoopsie is not running\n')
    sys.exit(1)

stamps = collect_info()
#print('stamps:', stamps)
if stamps:
    if not wait_uploaded(stamps, opts.timeout):
        sys.exit(2)
    print('All reports uploaded successfully')
